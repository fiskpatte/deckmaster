{"version":3,"sources":["Header.js","DeckOfficer/RegistrationKeyInput.js","utils/constants.js","DeckOfficer/DeckPicker.js","DeckOfficer/VehicleModal/VehicleModal.js","DeckMap/Frame/Frame.js","DeckMap/Lane/Lane.js","DeckMap/DeckMap.js","DeckOfficer/ConfirmationModal/ConfirmationModal.js","DeckOfficer/index.js","TugMaster/index.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","handleItemClick","e","_ref","path","_this","props","history","push","currentPath","this","location","pathname","react_default","a","createElement","Menu","color","inverted","icon","Item","active","includes","onClick","Component","withRouter","RegistrationKeyInput","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","registrationKey","inputRef","focus","event","setState","target","value","_this2","Input","autoFocus","ref","onChange","Button","positive","disabled","onSubmit","DECK_OFFICER_STEP","REGISTRATION_KEY_INPUT","DECK_PICKER","LANE_PICKER","REGISTRATION_KEY_CONFIRM","DeckPicker","className","decks","map","d","ix","key","VehicleModal","_this$props","open","centered","handleAction","Modal","Content","Table","celled","Body","InfoRow","label","Actions","negative","Row","Cell","Frame","frames","frame","vehicle","selectedFrame","onClickCallback","isSelected","isOccupied","isLast","length","frameStyle","classNames","FrameOccupied","FrameSelected","FrameLast","Lane","lane","selectedLane","updateLaneAndFrame","vehicles","getSuggestedFrame","_this$props2","stopPropagation","_this$props3","notOccupiedFrames","filter","some","frameNumber","reverse","_this$props4","laneStyle","LaneSelected","onClickLane","vehicleInFrame","find","v","Frame_Frame_Frame","onClickFrame","DeckMap","deckNumber","assignedVehicles","lanes","vehiclesInDeck","vehiclesInLane","laneNumber","Lane_Lane_Lane","ConfirmationModal","concat","steps","id","title","DeckOfficer","confirmationModalOpen","currentStep","vehicleModalOpen","handleClick","bind","assertThisInitialized","handleSubmit","vehicleModalAction","confirmationModalAction","_this$state","RegistrationKeyInput_RegistrationKeyInput","DeckPicker_DeckPicker","DeckMap_DeckMap_DeckMap","firstInput","secondInput","arguments","undefined","step","stepID","_this$state2","_this$state3","confirm","_this$state4","newAssignedVehicle","newVehicles","toConsumableArray","_this3","_this$state5","Fragment","Segment","Step","Group","isStepDisabled","Title","Description","stepDescription","renderStepComponent","ConfirmationModal_ConfirmationModal_ConfirmationModal","VehicleModal_VehicleModal_VehicleModal","TugMaster","Main","react_router","exact","component","App","src_Header","Main_Main","Boolean","window","hostname","match","ReactDOM","render","react_router_dom","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ef799fc.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Menu } from 'semantic-ui-react';\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nclass Header extends Component {\r\n\r\n    handleItemClick = (e,{path}) => {\r\n        this.props.history.push(path)\r\n    }\r\n\r\n    render() {\r\n\r\n        const currentPath = this.props.history.location.pathname\r\n\r\n        return (\r\n            <Menu color=\"blue\" inverted icon='labeled' >\r\n                <Menu.Item \r\n                    path='/deckofficer' \r\n                    active={currentPath.includes('/deckofficer') || currentPath === \"/\"} \r\n                    onClick={this.handleItemClick}>\r\n                        Deck officer\r\n                        </Menu.Item>\r\n                <Menu.Item \r\n                    path='/tugmaster' \r\n                    active={currentPath.includes('/tugmaster')} \r\n                    onClick={this.handleItemClick}>\r\n                        Tugmaster\r\n                    </Menu.Item>\r\n            </Menu>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Header)\r\n","import React, { Component } from 'react'\r\nimport { Input, Button } from 'semantic-ui-react';\r\n\r\nexport default class RegistrationKeyInput extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n          registrationKey:\"\"\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        this.inputRef.focus()\r\n    }\r\n    onChange(event){\r\n        this.setState({registrationKey: event.target.value})\r\n    }\r\n    render() {\r\n        return (\r\n            <div >\r\n                <h4>Vehicle registration number</h4>\r\n                <Input autoFocus ref={ref => this.inputRef = ref} onChange={(event) => this.onChange(event)}/>\r\n                <Button positive disabled={!this.state.registrationKey || this.state.registrationKey === \"\"} onClick={() => this.props.onSubmit(this.state.registrationKey)}>Continue</Button>\r\n            </div>\r\n        )\r\n    }\r\n}","export const DECK_OFFICER_STEP = {\r\n    REGISTRATION_KEY_INPUT: 1,\r\n    DECK_PICKER: 2,\r\n    LANE_PICKER: 3,\r\n    REGISTRATION_KEY_CONFIRM: 4\r\n}","import React, { Component } from 'react'\r\nimport { Button } from 'semantic-ui-react';\r\nimport './DeckPicker.css'\r\n\r\nexport default class DeckPicker extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h4>Deck</h4>\r\n                <div className=\"flexcolumn\">\r\n                    {this.props.decks.map((d,ix) => {return <Button className=\"DeckButton\" positive key={ix} onClick={() => this.props.onSubmit(d)}>{\"Deck \" + d}</Button>})}\r\n                </div>\r\n            </div>            \r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Modal, Table, Button } from 'semantic-ui-react';\r\nimport './VehicleModal.css'\r\n\r\nexport default class VehicleModal extends Component {\r\n    render() {\r\n        let {open,centered,registrationKey,handleAction} = this.props\r\n        return (\r\n            <Modal open={open} centered={centered}>\r\n                <Modal.Header>Vehicle info</Modal.Header>\r\n                <Modal.Content>\r\n                    <Table celled>\r\n                        <Table.Body>\r\n                            <InfoRow label={\"Registration number\"} value={registrationKey} />\r\n                            <InfoRow label={\"Type\"} value={\"Truck\"} />\r\n                            <InfoRow label={\"Length\"} value={\"8.0 m\"} />\r\n                            <InfoRow label={\"Width\"} value={\"2.1 m\"} />\r\n                            <InfoRow label={\"Height\"} value={\"3.2 m\"} />\r\n                            <InfoRow label={\"Weigth\"} value={\"18 t\"} />\r\n                        </Table.Body>\r\n                    </Table>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button negative onClick={() => handleAction(false)}>Cancel</Button>\r\n                    <Button positive onClick={() => handleAction(true)}>Confirm</Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\nfunction InfoRow({ label, value }){\r\n    return (\r\n        <Table.Row>\r\n            <Table.Cell className=\"InfoRowLabel\">{label}</Table.Cell>\r\n            <Table.Cell className=\"InfoRowValue\">{value}</Table.Cell>\r\n        </Table.Row>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport classNames from 'classnames'\r\nimport './Frame.css'\r\n\r\nexport default class Frame extends Component {\r\n    render() {\r\n\r\n        let {frames, frame, vehicle, selectedFrame, onClickCallback, disabled} = this.props\r\n        let isSelected = !disabled && frame === selectedFrame\r\n        let isOccupied = !!vehicle\r\n        let isLast = frames[frames.length - 1] === frame\r\n        let frameStyle = classNames(\r\n            'Frame',\r\n            'flexcolumn',\r\n            {\r\n                'FrameOccupied': isOccupied,\r\n                'FrameSelected': isSelected,\r\n                'FrameLast':isLast\r\n            }\r\n        )\r\n\r\n        return (\r\n            <div className={frameStyle} onClick={event => onClickCallback(event,frame,isOccupied)}>\r\n                <div>{frame}</div>\r\n                {vehicle ? <div>{vehicle.registrationKey}</div> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport classNames from 'classnames'\r\nimport './Lane.css'\r\nimport Frame from '../Frame/Frame'\r\n\r\n\r\nexport default class Lane extends Component {\r\n    onClickLane(){\r\n        let {lane, selectedLane, updateLaneAndFrame, vehicles, frames} = this.props\r\n        //If lane is full, do nothing\r\n        if(vehicles.length === frames.length){\r\n            return\r\n        }\r\n        //If another lane is clicked, select that lane and suggest a frame. Otherwise onClickFrame will trigger\r\n        if(lane !== selectedLane){\r\n            let suggestedFrame = this.getSuggestedFrame(lane)\r\n            updateLaneAndFrame(lane,suggestedFrame)\r\n        }\r\n    }\r\n    onClickFrame(event,frame,isOccupied){\r\n        let {lane, selectedLane, updateLaneAndFrame} = this.props\r\n        //If selected lane is clicked and is not occupied, update frame. Otherwise do nothing\r\n        if(lane === selectedLane && !isOccupied){\r\n            event.stopPropagation();\r\n            updateLaneAndFrame(lane,frame)\r\n        }\r\n    }\r\n    getSuggestedFrame(lane){\r\n        let {vehicles, frames} = this.props\r\n        let notOccupiedFrames = frames.filter(frame => !vehicles.some(vehicle => vehicle.frameNumber === frame))\r\n        if(notOccupiedFrames.length > 0){\r\n            return notOccupiedFrames.reverse()[0]\r\n        }\r\n        return \"\"\r\n    }\r\n    render() {\r\n        \r\n        let {lane, selectedLane, selectedFrame, vehicles, frames} = this.props\r\n        let isSelected = lane === selectedLane\r\n\r\n        let laneStyle = classNames(\r\n            'Lane',\r\n            {'LaneSelected': isSelected}\r\n        )\r\n        \r\n        return (\r\n            <div className=\"LaneContainer flexrow\" onClick={() => this.onClickLane()}>\r\n                <h4 className='LaneLabel'>Lane {lane}</h4>\r\n                <div className={laneStyle}>\r\n                    <div className='FrameContainer flexrow'>\r\n                        {frames.map((frame,ix) => {\r\n                            let vehicleInFrame = vehicles.find(v => v.frameNumber === frame)\r\n                            return (\r\n                                <Frame  key={ix}\r\n                                        frames={frames} \r\n                                        frame={frame} \r\n                                        selectedFrame={selectedFrame} \r\n                                        vehicle={vehicleInFrame} \r\n                                        onClickCallback={(event,frame,isOccupied) => this.onClickFrame(event,frame,isOccupied)}\r\n                                        disabled={!isSelected}/>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                    \r\n                </div> \r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './DeckMap.css'\r\nimport Lane from './Lane/Lane'\r\nimport { Button } from 'semantic-ui-react';\r\n\r\nexport default class DeckMap extends Component {\r\n    render() {\r\n\r\n        let {deckNumber, assignedVehicles, lanes, frames, selectedLane, selectedFrame, updateLaneAndFrame} = this.props\r\n\r\n        if(deckNumber === \"\"){\r\n            return null\r\n        }\r\n\r\n        let vehiclesInDeck = assignedVehicles.filter(v => v.deckNumber === deckNumber)\r\n        return (\r\n            <div className=\"DeckMap\">\r\n                {lanes.map((lane,ix) => {\r\n                    let vehiclesInLane = vehiclesInDeck.filter(v => v.laneNumber === lane)\r\n                    return (\r\n                        <Lane   key={ix} \r\n                                lane={lane} \r\n                                frames={frames}\r\n                                selectedLane={selectedLane} \r\n                                selectedFrame={selectedFrame} \r\n                                vehicles={vehiclesInLane} \r\n                                updateLaneAndFrame={updateLaneAndFrame}/>\r\n                    )\r\n                })}\r\n                <Button positive onClick={() => this.props.onSubmit(selectedLane, selectedFrame)}>Continue</Button>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Modal, Button } from 'semantic-ui-react';\r\nimport './ConfirmationModal.css'\r\n\r\nexport default class ConfirmationModal extends Component {\r\n    render() {\r\n        let {open,centered,registrationKey,deckNumber,laneNumber,frameNumber,handleAction} = this.props\r\n        return (\r\n            <Modal open={open} centered={centered}>\r\n                <Modal.Header>Confirm vehicle</Modal.Header>\r\n                <Modal.Content>\r\n                    <p>{`Registration number: ${registrationKey}`}</p>\r\n                    <p>{`Deck: ${deckNumber}`}</p>\r\n                    <p>{`Lane: ${laneNumber}`}</p>\r\n                    <p>{`Frame: ${frameNumber}`}</p>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button negative onClick={() => handleAction(false)}>Cancel</Button>\r\n                    <Button positive onClick={() => handleAction(true)}>Confirm</Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Step, Segment } from 'semantic-ui-react';\r\nimport RegistrationKeyInput from './RegistrationKeyInput'\r\nimport { DECK_OFFICER_STEP } from './../utils/constants'\r\nimport DeckPicker from './DeckPicker'\r\n// import LanePicker from './LanePicker'\r\nimport VehicleModal from './VehicleModal/VehicleModal';\r\nimport DeckMap from '../DeckMap/DeckMap'\r\nimport ConfirmationModal from './ConfirmationModal/ConfirmationModal';\r\n\r\nconst lanes = [\"1\",\"2\",\"3\",\"4\",\"5\"]\r\nconst decks = [\"5\",\"4\",\"3\",\"2\",\"1\"]\r\nconst frames = [\"000\",\"020\",\"040\",\"060\",\"080\",\"100\"]\r\nconst steps = [\r\n            {id:DECK_OFFICER_STEP.REGISTRATION_KEY_INPUT, title:'Reg nr'},\r\n            {id:DECK_OFFICER_STEP.DECK_PICKER, title:'Deck'},\r\n            {id:DECK_OFFICER_STEP.LANE_PICKER, title:'Lane'}\r\n]\r\nexport default class DeckOfficer extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n          registrationKey:\"\",\r\n          deckNumber:\"\",\r\n          laneNumber:\"\",\r\n          frameNumber:\"\",\r\n          confirmationModalOpen: false,\r\n          currentStep:DECK_OFFICER_STEP.REGISTRATION_KEY_INPUT,\r\n          vehicleModalOpen: false,\r\n          assignedVehicles:[]\r\n        }\r\n\r\n        this.handleClick = this.handleClick.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n        this.vehicleModalAction = this.vehicleModalAction.bind(this)\r\n        this.confirmationModalAction = this.confirmationModalAction.bind(this)\r\n\r\n    }\r\n    \r\n    renderStepComponent(){\r\n        let {currentStep,registrationKey,deckNumber,frameNumber,laneNumber,assignedVehicles} = this.state\r\n        switch(currentStep){\r\n            case DECK_OFFICER_STEP.REGISTRATION_KEY_INPUT:\r\n                return <RegistrationKeyInput onSubmit={this.handleSubmit}/>\r\n            case DECK_OFFICER_STEP.DECK_PICKER:\r\n                return <DeckPicker decks={decks} onSubmit={this.handleSubmit}/>\r\n            case DECK_OFFICER_STEP.LANE_PICKER:\r\n                // return <LanePicker  lanes={lanes} onSubmit={this.handleSubmit}\r\n                //                     updateLaneNumber={(laneNumber) => this.setState({laneNumber})}/>\r\n                return <DeckMap \r\n                            deckNumber={deckNumber} \r\n                            selectedLane={laneNumber} \r\n                            selectedFrame={frameNumber}\r\n                            registrationKey={registrationKey}\r\n                            lanes={lanes} \r\n                            decks={decks}\r\n                            frames={frames}\r\n                            assignedVehicles={assignedVehicles}\r\n                            updateLaneAndFrame={(laneNumber,frameNumber) => this.setState({laneNumber,frameNumber})}\r\n                            onSubmit={this.handleSubmit}\r\n                        />\r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n    handleSubmit(firstInput,secondInput = \"\"){\r\n\r\n        if(firstInput === \"\") return\r\n\r\n        switch(this.state.currentStep){\r\n            case DECK_OFFICER_STEP.REGISTRATION_KEY_INPUT:\r\n                \r\n                this.setState({\r\n                    vehicleModalOpen: true, \r\n                    registrationKey: firstInput, \r\n                    currentStep: DECK_OFFICER_STEP.REGISTRATION_KEY_CONFIRM\r\n                })\r\n                break;\r\n\r\n            case DECK_OFFICER_STEP.REGISTRATION_KEY_CONFIRM:\r\n\r\n                this.setState({currentStep:DECK_OFFICER_STEP.DECK_PICKER})\r\n                break;\r\n\r\n            case DECK_OFFICER_STEP.DECK_PICKER:\r\n\r\n                this.setState({\r\n                    currentStep:DECK_OFFICER_STEP.LANE_PICKER,\r\n                    deckNumber:firstInput\r\n                })\r\n                break;\r\n\r\n            case DECK_OFFICER_STEP.LANE_PICKER:\r\n\r\n                    if(secondInput === \"\") return\r\n                    this.setState({\r\n                        confirmationModalOpen:true,\r\n                        laneNumber:firstInput,\r\n                        frameNumber:secondInput\r\n                    })\r\n                    break;\r\n                    \r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n    handleClick(event,{step}){\r\n        switch(step){\r\n            case DECK_OFFICER_STEP.REGISTRATION_KEY_INPUT:\r\n                this.setState({ currentStep:DECK_OFFICER_STEP.REGISTRATION_KEY_INPUT,\r\n                                registrationKey:\"\",\r\n                                deckNumber:\"\",\r\n                                laneNumber:\"\",\r\n                                frameNumber:\"\"\r\n                            })\r\n                break;\r\n            case DECK_OFFICER_STEP.DECK_PICKER:\r\n                this.setState({ currentStep:DECK_OFFICER_STEP.DECK_PICKER,\r\n                                deckNumber:\"\",\r\n                                laneNumber:\"\",\r\n                                frameNumber:\"\"\r\n                            })\r\n                break;\r\n            case DECK_OFFICER_STEP.LANE_PICKER:\r\n                    this.setState({ currentStep:DECK_OFFICER_STEP.LANE_PICKER,\r\n                                    laneNumber:\"\",\r\n                                    frameNumber:\"\"\r\n                                })\r\n                    break;\r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n    isStepDisabled(stepID){\r\n        let {registrationKey, deckNumber} = this.state\r\n        switch(stepID){\r\n            case DECK_OFFICER_STEP.REGISTRATION_KEY_INPUT:\r\n                return false\r\n            case DECK_OFFICER_STEP.DECK_PICKER:\r\n                return registrationKey === \"\"\r\n            case DECK_OFFICER_STEP.LANE_PICKER:\r\n                return deckNumber === \"\"\r\n            default:\r\n                return true\r\n        }\r\n    }\r\n    stepDescription(stepID){\r\n        let {registrationKey, deckNumber, laneNumber, frameNumber} = this.state\r\n        switch(stepID){\r\n            case DECK_OFFICER_STEP.REGISTRATION_KEY_INPUT:\r\n                return registrationKey\r\n            case DECK_OFFICER_STEP.DECK_PICKER:\r\n                return deckNumber\r\n            case DECK_OFFICER_STEP.LANE_PICKER:\r\n                return `${laneNumber} ${frameNumber}`\r\n            default:\r\n                return true\r\n        }\r\n    }\r\n\r\n    confirmationModalAction(confirm){\r\n        if(confirm){\r\n            let {registrationKey,deckNumber,frameNumber,laneNumber, assignedVehicles} = this.state\r\n            let newAssignedVehicle = {registrationKey,deckNumber,frameNumber,laneNumber}\r\n            let newVehicles = [...assignedVehicles,newAssignedVehicle]\r\n            this.setState({ \r\n                currentStep:DECK_OFFICER_STEP.REGISTRATION_KEY_INPUT,\r\n                registrationKey:\"\",\r\n                deckNumber:\"\",\r\n                laneNumber:\"\",\r\n                frameNumber:\"\",\r\n                confirmationModalOpen:false,\r\n                assignedVehicles:newVehicles\r\n            })\r\n        } else{\r\n            this.setState({confirmationModalOpen:false})\r\n        }\r\n    }\r\n    vehicleModalAction(confirm){\r\n        if(confirm){\r\n            this.setState({\r\n                vehicleModalOpen: false\r\n            })\r\n            this.handleSubmit(this.state.registrationKey)\r\n        }else{\r\n            this.setState({\r\n                vehicleModalOpen: false,\r\n                currentStep: DECK_OFFICER_STEP.REGISTRATION_KEY_INPUT,\r\n                registrationKey: \"\"\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let {currentStep,registrationKey,deckNumber,frameNumber,laneNumber, confirmationModalOpen, vehicleModalOpen} = this.state\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Segment>\r\n                    <Step.Group>\r\n                        {steps.map((step,ix) => \r\n                            <Step   key={ix}\r\n                                    step={step.id}\r\n                                    active={currentStep === step.id}\r\n                                    disabled={this.isStepDisabled(step.id)}\r\n                                    onClick={this.handleClick}\r\n                                >\r\n                                <Step.Content>\r\n                                    <Step.Title>{step.title}</Step.Title>\r\n                                    <Step.Description>{this.stepDescription(step.id)}</Step.Description>\r\n                                </Step.Content>\r\n                            </Step>\r\n                        )}                    \r\n                    </Step.Group>\r\n                    {this.renderStepComponent()}\r\n                    <ConfirmationModal\r\n                        open={confirmationModalOpen}\r\n                        centered={false}\r\n                        registrationKey={registrationKey}\r\n                        deckNumber={deckNumber}\r\n                        laneNumber={laneNumber}\r\n                        frameNumber={frameNumber}\r\n                        handleAction={this.confirmationModalAction}/>\r\n                    <VehicleModal\r\n                        open={vehicleModalOpen}\r\n                        centered={false} \r\n                        registrationKey={this.state.registrationKey} \r\n                        handleAction={this.vehicleModalAction} />\r\n                </Segment>\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Segment, Button } from 'semantic-ui-react';\r\nimport './index.css'\r\n\r\nexport default class TugMaster extends Component {\r\n    render() {\r\n        return (\r\n\r\n\r\n            <Segment className=\"TugmasterInstruction\">\r\n                <h4>Next instruction</h4>\r\n                <div className=\"flexcolumn\">\r\n                    <div className=\"TugmasterRow\">\r\n                        <label className=\"TugmasterLabel\">Go to</label>\r\n                        <span className=\"TugmasterValue\">22C</span>\r\n                    </div>\r\n                    <div className=\"TugmasterRow\">\r\n                        <label className=\"TugmasterLabel\">Get vehicle</label>\r\n                        <span className=\"TugmasterValue\">ABC 123</span>\r\n                    </div>\r\n                    <div className=\"TugmasterRow\">\r\n                        <label className=\"TugmasterLabel\">Place at</label>\r\n                        \r\n                        <span className=\"TugmasterValue\">Deck 3 - Lane 2 - Frame 122</span>\r\n                        \r\n                    </div>\r\n                    <Button className=\"DoneButton\" positive>Done</Button>\r\n                </div>\r\n            </Segment>\r\n            \r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {Switch, Route} from 'react-router-dom'\r\nimport DeckOfficer from './DeckOfficer/index';\r\nimport TugMaster from './TugMaster/index';\r\nexport default class Main extends Component {\r\n    render() {\r\n        return (\r\n            <main className=\"MainContainer\">\r\n                <Switch>\r\n                    <Route exact path='/' component={DeckOfficer}/>\r\n                    <Route path='/deckofficer' component={DeckOfficer}/>\r\n                    <Route path='/tugmaster' component={TugMaster}/>\r\n                </Switch>\r\n            </main>            \r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from './Header';\r\nimport Main from './Main';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Main />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>, \r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}